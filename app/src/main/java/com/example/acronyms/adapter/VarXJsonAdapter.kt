// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress(
    "DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION"
)

package com.example.acronyms.adapter

import com.example.acronyms.data.model.VarX
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class VarXJsonAdapter(
    moshi: Moshi
) : JsonAdapter<VarX>() {
    private val options: JsonReader.Options = JsonReader.Options.of("freq", "lf", "since")

    private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "freq")

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(
        String::class.java,
        emptySet(),
        "lf"
    )

    public override fun toString(): String = buildString(26) {
        append("GeneratedJsonAdapter(").append("VarX").append(')')
    }

    public override fun fromJson(reader: JsonReader): VarX {
        var freq: Int? = null
        var lf: String? = null
        var since: Int? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> freq = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("freq", "freq", reader)
                1 -> lf = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lf", "lf", reader)
                2 -> since = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "since",
                    "since",
                    reader
                )
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        return VarX(
            freq = freq ?: throw Util.missingProperty("freq", "freq", reader),
            lf = lf ?: throw Util.missingProperty("lf", "lf", reader),
            since = since ?: throw Util.missingProperty("since", "since", reader)
        )
    }

    public override fun toJson(writer: JsonWriter, value_: VarX?) {
        if (value_ == null) {
            throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("freq")
        intAdapter.toJson(writer, value_.freq)
        writer.name("lf")
        stringAdapter.toJson(writer, value_.lf)
        writer.name("since")
        intAdapter.toJson(writer, value_.since)
        writer.endObject()
    }
}
